/**
 * Script simples para testar a conex√£o ao MongoDB
 * Execute com: node test-mongodb-connection.js
 */

const mongoose = require('mongoose');

const testConnection = async () => {
  try {
    console.log('üîç Testando conex√£o ao MongoDB...');
    
    // Conectar ao MongoDB local
    await mongoose.connect('mongodb://localhost:27017/test', {
      serverSelectionTimeoutMS: 5000,
    });
    
    console.log('‚úÖ MongoDB est√° a funcionar!');
    console.log('üì° Conex√£o estabelecida com sucesso');
    
    // Testar opera√ß√£o b√°sica
    const testSchema = new mongoose.Schema({ name: String });
    const TestModel = mongoose.model('Test', testSchema);
    
    // Criar um documento de teste
    const testDoc = new TestModel({ name: 'Teste de conex√£o' });
    await testDoc.save();
    
    console.log('‚úÖ Opera√ß√£o de escrita bem-sucedida');
    
    // Ler o documento
    const found = await TestModel.findOne({ name: 'Teste de conex√£o' });
    console.log('‚úÖ Opera√ß√£o de leitura bem-sucedida:', found.name);
    
    // Limpar teste
    await TestModel.deleteOne({ name: 'Teste de conex√£o' });
    console.log('‚úÖ Limpeza conclu√≠da');
    
    console.log('üéâ MongoDB est√° totalmente funcional!');
    
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:');
    
    if (error.name === 'MongooseServerSelectionError') {
      console.error('üîå MongoDB n√£o est√° a correr ou n√£o est√° acess√≠vel');
      console.error('üí° Certifica-te que:');
      console.error('   - MongoDB est√° instalado');
      console.error('   - O servi√ßo MongoDB est√° a correr');
      console.error('   - A porta 27017 est√° dispon√≠vel');
    } else {
      console.error(error.message);
    }
  } finally {
    // Fechar conex√£o
    await mongoose.connection.close();
    console.log('üì° Conex√£o fechada');
    process.exit(0);
  }
};

testConnection();
